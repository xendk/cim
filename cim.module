<?php

/**
 * @file
 * Configuration interchange and management.
 */

use Drupal\cim\SnapshotController;
use Drupal\cim\Difference;
/**
 * Implements hook_menu().
 */
function cim_menu() {
  $root = 'admin/config/development/cim';

  $items[$root] = array(
    'title' => 'Configuration Interchange and Management',
    'page callback' => 'cim_admin_list',
    'access arguments' => array('administer snapshots'),
    'file' => 'cim.admin.inc',
  );

  $items[$root . '/list'] = array(
    'title' => 'List',
    'description' => 'List snapshots',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'cim.admin.inc',
  );
  $items[$root . '/test'] = array(
    'title' => 'Teststuff',
    'page callback' => 'cim_testing',
    'access arguments' => array('administer snapshots'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cim.admin.inc',
  );

  $items[$root . '/create'] = array(
    'title' => 'Create snapshot.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cim_admin_create_snapshot_form'),
    'access arguments' => array('administer snapshots'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'cim.admin.inc',
  );

  $items[$root . '/snapshot/%cim_snapshot'] = array(
    'title' => 'Snapshot details',
    'page callback' => 'cim_admin_snapshot_view',
    'page arguments' => array(5),
    'access arguments' => array('administer snapshots'),
    'file' => 'cim.admin.inc',
  );

  $items[$root . '/snapshot/%cim_snapshot/details'] = array(
    'title' => 'Details',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items[$root . '/snapshot/%cim_snapshot/revert'] = array(
    'title' => 'Revert',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cim_admin_revert_snapshot_form', 5),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cim.admin.inc',
    'access callback' => 'cim_snapshot_access',
    'access arguments' => array(5),
  );

  $items[$root . '/snapshot/%cim_snapshot/rollback'] = array(
    'title' => 'Rollback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cim_admin_rollback_snapshot_form', 5),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cim.admin.inc',
    'access callback' => 'cim_snapshot_access',
    'access arguments' => array(5),
  );

  return $items;
}

/**
 * Menu loader function.
 */
function cim_snapshot_load($cid) {
  $ssc = new SnapshotController();
  return $ssc->loadCid($cid);
}

/**
 * Menu access function.
 *
 * Returns TRUE if snapshot has a parent and user has 'administer snapshots'
 * permission.
 */
function cim_snapshot_access($snapshot) {
  if (!empty($snapshot->changeset_parent) && user_access('administer snapshots')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Get the snapshot controller.
 */
function cim_get_controller() {
  $controller = &drupal_static(__FUNCTION__, NULL);
  if (!isset($controller)) {
    $controller = new SnapshotController();
  }
  return $controller;
}

/**
 * Implements hook_permission().
 */
function cim_permissions() {
  return array(
    'administer snapshots' => array(
      'title' => t('Administer configuration snapshots'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function cim_theme() {
  return array(
    'cim_admin_snapshot_overview' => array(
      'variables' => array('sha' => NULL, 'message' => NULL),
    ),
  );
}

/**
 * Returns HTML for a snapshot description for the snapshot listing admin page.
 *
 * @param $vars
 *   An associative array containing:
 *   - sha: Snapshot SHA.
 *   - link: Path to the snapshot page.
 *   - message: The logged message of the snapshot.
 *
 * @ingroup themeable
 */
function theme_cim_admin_snapshot_overview($vars) {
  $output = l($vars['sha'], $vars['link']);
  if ($vars['message']) {
    $output .= '<div class="message">' . filter_xss_admin($vars['message']) . '</div>';
  }
  return $output;
}

/**
 * Implements hook_element_info().
 */
function cim_element_info() {
  return array(
    'cim_changeset_view' => array(
      '#input' => FALSE,
      '#pre_render' => array('cim_process_changeset_view_pre_render'),
    ),
  );
}

/**
 * Process cim_changeset_view element.
 */
function cim_process_changeset_view_pre_render($element) {
  // Include the utility drupal_var_export() function.
  include_once './core/includes/utility.inc';

  $rows = array();
  foreach ($element['#changeset']->changes() as $change) {
    $rows[] = array(
      join('.', $change->path),
      $change->a === Difference::NULL ? check_plain('<unset>') : (is_array($change->a) ? '<pre>' . drupal_var_export($change->a) . '</pre>' : check_plain($change->a)),
      $change->b === Difference::NULL ? check_plain('<unset>') : (is_array($change->b) ? '<pre>' . drupal_var_export($change->b) . '</pre>' : check_plain($change->b)),
    );
  }

  $element['changes'] = array(
    '#type' => 'fieldset',
    '#title' => t('Changes'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $element['changes']['details'] = array(
    '#theme' => 'table',
    '#header' => array(t('Configuration key'), t('From'), t('To')),
    '#rows' => $rows,
  );

  return $element;
}
